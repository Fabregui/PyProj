#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Apr 16, 2023 01:40:16 AM CEST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import pyproj_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])

    global _images
    _images = (
         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                  KkoNUtRHpYYAADs= '''),
         tk.PhotoImage("img_close_white", data='''R0lGODlhDAAMAPQfAM3NzcjI
                yMbGxsLCwsDAwL29vbq6urKysrGxsa6urqmpqZ+fn56enpaWloSEhF9fX0ZGR
                j09PTMzMykpKQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///yH
                5BAEKAB8ALAAAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+fkxBgPi
                BDwshCWHQfc5KkoNUtRHpYYAADs='''),
         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )
    if _bgmode == "dark":
        style.element_create("close", "image", "img_close_white",
           ('active', 'pressed',  'img_closepressed'),
           ('active', 'alternate', 'img_closeactive'), border=8, sticky='')
    else:
        style.element_create("close", "image", "img_close",
           ('active', 'pressed',  'img_closepressed'),
           ('active', 'alternate', 'img_closeactive'), border=8, sticky='')

    style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                 {"sticky": "nswe"})])
    style.layout("ClosetabNotebook.Tab", [
        ("ClosetabNotebook.tab",
          { "sticky": "nswe",
            "children": [
                ("ClosetabNotebook.padding", {
                    "side": "top",
                    "sticky": "nswe",
                    "children": [
                        ("ClosetabNotebook.focus", {
                            "side": "top",
                            "sticky": "nswe",
                            "children": [
                                ("ClosetabNotebook.label", {"side":
                                  "left", "sticky": ''}),
                                ("ClosetabNotebook.close", {"side":
                                    "left", "sticky": ''}),]})]})]})])

    style.map('ClosetabNotebook.Tab', background =
        [('selected', _bgcolor), ('active', _tabbg1),
        ('!active', _tabbg2)], foreground =
        [('selected', _fgcolor), ('active', _tabfg1), ('!active', _tabfg2)])
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x536+670+225")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        _style_code()
        PNOTEBOOK="ClosetabNotebook"
        self.PNotebook1 = ttk.Notebook(self.top)
        self.PNotebook1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook1.configure(style=PNOTEBOOK)
        self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t1, padding=3)
        self.PNotebook1.tab(0, text='''Projet''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t1.configure(background="#d9d9d9")
        self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t1.configure(highlightcolor="black")
        self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
        self.PNotebook1.add(self.PNotebook1_t2, padding=3)
        self.PNotebook1.tab(1, text='''Ressource''', compound="left"
                ,underline='''-1''', )
        self.PNotebook1_t2.configure(background="#d9d9d9")
        self.PNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.PNotebook1_t2.configure(highlightcolor="black")
        PNOTEBOOK="ClosetabNotebook"
        self.PNotebook2 = ttk.Notebook(self.PNotebook1_t1)
        self.PNotebook2.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook2.configure(style=PNOTEBOOK)
        self.PNotebook2_t1 = tk.Frame(self.PNotebook2)
        self.PNotebook2.add(self.PNotebook2_t1, padding=3)
        self.PNotebook2.tab(0, text='''Gantt''', compound="left"
                ,underline='''-1''', )
        self.PNotebook2_t1.configure(background="#d9d9d9")
        self.PNotebook2_t1.configure(highlightbackground="#d9d9d9")
        self.PNotebook2_t1.configure(highlightcolor="black")
        self.PNotebook2_t2 = tk.Frame(self.PNotebook2)
        self.PNotebook2.add(self.PNotebook2_t2, padding=3)
        self.PNotebook2.tab(1, text='''WBS''', compound="left", underline='''-1'''
                ,)
        self.PNotebook2_t2.configure(background="#d9d9d9")
        self.PNotebook2_t2.configure(highlightbackground="#d9d9d9")
        self.PNotebook2_t2.configure(highlightcolor="black")
        self.TPanedwindow1 = ttk.Panedwindow(self.PNotebook2_t1
                , orient="horizontal")
        self.TPanedwindow1.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=0.932)
        self.TPanedwindow1_p1 = ttk.Labelframe(self.TPanedwindow1, width=75
                , text='Tasks')
        self.TPanedwindow1.add(self.TPanedwindow1_p1, weight=0)
        self.TPanedwindow1_p1.configure(text='''Tasks''')
        self.TPanedwindow1_p2 = ttk.Labelframe(self.TPanedwindow1, text='Gantt')
        self.TPanedwindow1.add(self.TPanedwindow1_p2, weight=0)
        self.TPanedwindow1_p2.configure(text='''Gantt''')
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)
        self.Scale1 =  tk.Scale(self.PNotebook2_t1, from_=0.0, to=100.0, resolution=1.0)
        self.Scale1.place(relx=0.929, rely=0.021, relheight=0.944
                , relwidth=0.076)
        self.Scale1.configure(activebackground="beige")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="black")
        self.Scale1.configure(length="376")
        self.Scale1.configure(troughcolor="#d9d9d9")
        self.Custom1 = pyproj_support.Custom(self.PNotebook2_t2)
        self.Custom1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PNotebook2.bind('<Button-1>',_button_press)
        self.PNotebook2.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook2.bind('<Motion>',_mouse_over)
        self.PNotebook1.bind('<Button-1>',_button_press)
        self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
        self.PNotebook1.bind('<Motion>',_mouse_over)

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [75, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

# The following code is added to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except tk.TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])

def start_up():
    pyproj_support.main()

if __name__ == '__main__':
    pyproj_support.main()




